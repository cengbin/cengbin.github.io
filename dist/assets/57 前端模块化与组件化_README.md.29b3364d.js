import{_ as a,o as e,c as t,Q as r}from"./chunks/framework.6ae5a3d9.js";const u=JSON.parse('{"title":"前端开发「模块化」与「组件化」","description":"","frontmatter":{},"headers":[],"relativePath":"57 前端模块化与组件化/README.md","filePath":"57 前端模块化与组件化/README.md"}'),o={name:"57 前端模块化与组件化/README.md"},i=r('<h1 id="前端开发「模块化」与「组件化」" tabindex="-1">前端开发「模块化」与「组件化」 <a class="header-anchor" href="#前端开发「模块化」与「组件化」" aria-label="Permalink to &quot;前端开发「模块化」与「组件化」&quot;">​</a></h1><h2 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h2><h4 id="_1-什么是模块" tabindex="-1">1. 什么是模块？ <a class="header-anchor" href="#_1-什么是模块" aria-label="Permalink to &quot;1. 什么是模块？&quot;">​</a></h4><p>将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起。</p><h4 id="_2-javascript-模块化" tabindex="-1">2. JavaScript 模块化 <a class="header-anchor" href="#_2-javascript-模块化" aria-label="Permalink to &quot;2. JavaScript 模块化&quot;">​</a></h4><p>块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信。</p><p>JavaScript模块化方案有IIFE、CommonJS、AMD、CMD、UMD、ES6 Module。</p><h4 id="_3-css-模块化" tabindex="-1">3. CSS 模块化 <a class="header-anchor" href="#_3-css-模块化" aria-label="Permalink to &quot;3. CSS 模块化&quot;">​</a></h4><p>CSS模块化开发大多是在less、sass、stylus等预处理器的import/mixin特性支持下实现的。</p><h3 id="组件化" tabindex="-1">组件化 <a class="header-anchor" href="#组件化" aria-label="Permalink to &quot;组件化&quot;">​</a></h3><p>组件化是将页面视作为一个容器，把页面各个独立的部分视作为组件，根据内容的需要，把相关组件拼装在一起即可组成完整的页面。组件具有独立性，组件与组件之间可以自由的组合。</p><p>前端组件包含了模板（HTML）、样式（CSS）、脚本（JavaScript）三部分，其中样式、脚本可以由一个或多个模块组成。</p>',12),s=[i];function c(n,h,l,_,d,p){return e(),t("div",null,s)}const S=a(o,[["render",c]]);export{u as __pageData,S as default};

import{_ as l,o as i,c as a,Q as e}from"./chunks/framework.6ae5a3d9.js";const f=JSON.parse('{"title":"应用监控","description":"","frontmatter":{},"headers":[],"relativePath":"1 前端工程化/监控/README.md","filePath":"1 前端工程化/监控/README.md"}'),o={name:"1 前端工程化/监控/README.md"},t=e('<h1 id="应用监控" tabindex="-1">应用监控 <a class="header-anchor" href="#应用监控" aria-label="Permalink to &quot;应用监控&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><ol><li>用户设备千奇百怪，我们的代码在这些设备上运行就如同飞奔的野马，随便跑，你也不知道它们到底运行的如何，开发者根本不清楚！例子：负库存，高库存，虚库存。对于研发来说如果有应用监控机制可以提前了解线上应用情况，主动出击，提前排坑 ，不要等用户反馈。(如何提前发现问题？)</li><li>用户反馈问题到我们这边，很多时候定位问题只能靠猜，尤其是一些偶发诱因，因为根本不知道用户是如何操作的，真实环境遇到的问题通常是很多随机因素叠加的形成的，因此很难回放用户的操作来还原现场找到原因。(如何定位问题？) 应用分类</li></ol><h2 id="原生ios-android应用、web应用-hn应用、rn应用、小程序" tabindex="-1">原生IOS/Android应用、Web应用，HN应用、RN应用、小程序… <a class="header-anchor" href="#原生ios-android应用、web应用-hn应用、rn应用、小程序" aria-label="Permalink to &quot;原生IOS/Android应用、Web应用，HN应用、RN应用、小程序…&quot;">​</a></h2><ul><li>IOS/Android原生</li><li>RN</li><li>Web</li><li>小程序</li><li>...</li></ul><h2 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h2><ol><li>数据采集</li></ol><ul><li>性能采集</li><li>错误采集</li><li>日志采集</li></ul><ol start="2"><li>数据上报</li></ol><ul><li>上报方法</li><li>上报时机</li></ul><ol start="3"><li>数据分析</li></ol><ul><li>展示</li><li>预警</li></ul><h3 id="性能数据采集" tabindex="-1">性能数据采集 <a class="header-anchor" href="#性能数据采集" aria-label="Permalink to &quot;性能数据采集&quot;">​</a></h3><ol><li>chrome 开发团队提出了一系列用于检测网页性能的指标：</li></ol><ul><li>FP(first-paint)，从页面加载开始到第一个像素绘制到屏幕上的时间</li><li>FCP(first-contentful-paint)，从页面加载开始到页面内容的任何部分在屏幕上完成渲染的时间</li><li>LCP(largest-contentful-paint)，从页面加载开始到最大文本块或图像元素在屏幕上完成渲染的时间</li><li>CLS(layout-shift)，从页面加载开始和其生命周期状态[2]变为隐藏期间发生的所有意外布局偏移的累积分数</li></ul><ol start="2"><li>DOMContentLoaded、load 事件</li><li>接口请求耗时</li><li>资源加载时间、缓存命中率</li><li>FPS</li><li>…</li></ol><h2 id="错误数据采集" tabindex="-1">错误数据采集 <a class="header-anchor" href="#错误数据采集" aria-label="Permalink to &quot;错误数据采集&quot;">​</a></h2><ol><li>资源加载错误</li><li>JS错误</li><li>Promise错误</li><li>请求错误</li><li>Vue错误</li><li>…</li></ol><h2 id="日志采集" tabindex="-1">日志采集 <a class="header-anchor" href="#日志采集" aria-label="Permalink to &quot;日志采集&quot;">​</a></h2><ol><li>PV</li><li>UV</li><li>页面停留时间</li><li>页面访问深度</li><li>用户点击</li><li>页面跳转</li><li>…</li></ol><h2 id="上报方法" tabindex="-1">上报方法 <a class="header-anchor" href="#上报方法" aria-label="Permalink to &quot;上报方法&quot;">​</a></h2><ol><li>sendBeacon</li><li>XMLHttpRequest</li><li>image</li><li>...</li></ol><h2 id="上报时机" tabindex="-1">上报时机 <a class="header-anchor" href="#上报时机" aria-label="Permalink to &quot;上报时机&quot;">​</a></h2><ol><li>采用 requestIdleCallback/setTimeout 延时上报。</li><li>在 beforeunload 回调函数里上报。</li><li>缓存上报数据，达到一定数量后再上报。</li></ol><h2 id="展示" tabindex="-1">展示 <a class="header-anchor" href="#展示" aria-label="Permalink to &quot;展示&quot;">​</a></h2><h2 id="预警" tabindex="-1">预警 <a class="header-anchor" href="#预警" aria-label="Permalink to &quot;预警&quot;">​</a></h2><ol><li>飞书</li><li>邮件</li></ol><p>目前现有的RN和原生监控要搞起来，同时Web、HN也要搞起来。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li>变被动为主动，有效的帮助解决问题。</li><li>提高效率。（一套完整的应用监控提供的核心功能为监控及诊断一些问题提供了解决方案，可以有效地帮助开发、产品、运维人员）</li><li>体现项目质量。</li><li>防止用户欺诈。（例子：转介绍拉新用户给奖励案例。A通过某应用分享链接给微信好友，B打开链接注册）</li></ol>',30),r=[t];function n(h,d,s,c,u,b){return i(),a("div",null,r)}const q=l(o,[["render",n]]);export{f as __pageData,q as default};

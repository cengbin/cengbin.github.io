import{_ as e,o as a,c as n,Q as s}from"./chunks/framework.0f4e1e9e.js";const o="/static/iamge1.717a9c3b.jpeg",t="/static/image2.afb7652c.png",U=JSON.parse('{"title":"URL详解与URL编码/解码","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/详解 之 URL与浏览器编码、解码/README.md","filePath":"frontend/详解 之 URL与浏览器编码、解码/README.md"}'),p={name:"frontend/详解 之 URL与浏览器编码、解码/README.md"},l=s('<h1 id="url详解与url编码-解码" tabindex="-1">URL详解与URL编码/解码 <a class="header-anchor" href="#url详解与url编码-解码" aria-label="Permalink to &quot;URL详解与URL编码/解码&quot;">​</a></h1><h2 id="一、url简介" tabindex="-1">一、URL简介 <a class="header-anchor" href="#一、url简介" aria-label="Permalink to &quot;一、URL简介&quot;">​</a></h2><blockquote><p>URL：(Uniform/Universal Resource Locator 的缩写，统一资源定位符)。</p></blockquote><blockquote><p>URI：(Uniform Resource Identifier 的缩写，统一资源标识符)。</p></blockquote><h3 id="url-标准格式" tabindex="-1">URL 标准格式 <a class="header-anchor" href="#url-标准格式" aria-label="Permalink to &quot;URL 标准格式&quot;">​</a></h3><p><a href="http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name" target="_blank" rel="noreferrer">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p><p>从上面的URL可以看出，一个完整的URL包括以下几部分：</p><p><img src="'+o+`" alt="路径详解"></p><p>通常而言，我们所熟悉的 URL 的常见定义格式为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">scheme://host[:port#]/path/.../[;url-params][?query-string][#anchor]</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">scheme //有我们很熟悉的http、https、ftp以及著名的ed2k，迅雷的thunder等。</span></span>
<span class="line"><span style="color:#e1e4e8;">host   //HTTP服务器的IP地址或者域名</span></span>
<span class="line"><span style="color:#e1e4e8;">port#  //HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如tomcat的默认端口是8080 http://localhost:8080/</span></span>
<span class="line"><span style="color:#e1e4e8;">path   //访问资源的路径</span></span>
<span class="line"><span style="color:#e1e4e8;">url-params  //所带参数</span></span>
<span class="line"><span style="color:#e1e4e8;">query-string    //发送给http服务器的数据</span></span>
<span class="line"><span style="color:#e1e4e8;">anchor //锚点定位</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">scheme://host[:port#]/path/.../[;url-params][?query-string][#anchor]</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">scheme //有我们很熟悉的http、https、ftp以及著名的ed2k，迅雷的thunder等。</span></span>
<span class="line"><span style="color:#24292e;">host   //HTTP服务器的IP地址或者域名</span></span>
<span class="line"><span style="color:#24292e;">port#  //HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如tomcat的默认端口是8080 http://localhost:8080/</span></span>
<span class="line"><span style="color:#24292e;">path   //访问资源的路径</span></span>
<span class="line"><span style="color:#24292e;">url-params  //所带参数</span></span>
<span class="line"><span style="color:#24292e;">query-string    //发送给http服务器的数据</span></span>
<span class="line"><span style="color:#24292e;">anchor //锚点定位</span></span></code></pre></div><h2 id="二、编码" tabindex="-1">二、编码 <a class="header-anchor" href="#二、编码" aria-label="Permalink to &quot;二、编码&quot;">​</a></h2><p>在 JavaScript 中，一共有三个方法可以对字符串进行 URI 编码，分别为 escape()、encodeURI() 与 encodeURIComponent()，它们的区别如下。</p><h3 id="escape-方法" tabindex="-1">escape() 方法 <a class="header-anchor" href="#escape-方法" aria-label="Permalink to &quot;escape() 方法&quot;">​</a></h3><p><img src="`+t+'" alt=""></p><h3 id="encodeuri-方法" tabindex="-1">encodeURI() 方法 <a class="header-anchor" href="#encodeuri-方法" aria-label="Permalink to &quot;encodeURI() 方法&quot;">​</a></h3><p>类型 包含<br> 保留字符 ; , / ? : @ &amp; = + $<br> 非转义的字符 字母 数字 - _ . ! ~ * &#39; ( )<br> 数字符号 #</p><p>因此，encodeURI 自身无法产生能适用于 HTTP GET 或 POST 请求的 URI，例如对于 XMLHTTPRequests， 因为 “&amp;”, “+”, 和 “=” 不会被编码，然而在 GET 和 POST 请求中它们是特殊字符。</p><h3 id="encodeuricomponent-方法" tabindex="-1">encodeURIComponent() 方法 <a class="header-anchor" href="#encodeuricomponent-方法" aria-label="Permalink to &quot;encodeURIComponent() 方法&quot;">​</a></h3><p>encodeURIComponent() 是对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的 UTF-8 编码。正因为这个方法是对 URI 的组成部分编码的，所以其中不应该含有任何 URI 特殊字符，它会转义除了字母、数字、(、)、.、!、~、*、&#39;、-和_之外的所有字符，原因如 MDN 上所写：</p><blockquote><p>为了避免服务器收到不可预知的请求，对任何用户输入的作为 URI 部分的内容你都需要用 encodeURIComponent 进行转义。比如，一个用户可能会输入”Thyme &amp;time=again“ 作为 comment 变量的一部分。如果不使用 encodeURIComponent 对此内容进行转义，服务器得到的将是 comment=Thyme%20&amp;time=again。请注意，”&amp;” 符号和”=” 符号产生了一个新的键值对，所以服务器得到两个键值对（一个键值对是 comment=Thyme，另一个则是 time=again），而不是一个键值对。</p></blockquote><blockquote><p>—— encodeURIComponent() | MDN</p></blockquote><h2 id="三、解码" tabindex="-1">三、解码 <a class="header-anchor" href="#三、解码" aria-label="Permalink to &quot;三、解码&quot;">​</a></h2><h3 id="decodeuricomponent-方法" tabindex="-1">decodeURIComponent() 方法 <a class="header-anchor" href="#decodeuricomponent-方法" aria-label="Permalink to &quot;decodeURIComponent() 方法&quot;">​</a></h3><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://www.cnblogs.com/coco1s/p/5038412.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/coco1s/p/5038412.html</a></li></ul>',25),r=[l];function c(i,h,d,m,u,R){return a(),n("div",null,r)}const _=e(p,[["render",c]]);export{U as __pageData,_ as default};

import{_ as e,o as t,c as n,Q as i}from"./chunks/framework.0f4e1e9e.js";const r="/static/1.fba0983b.jpg",s="/static/2.5dc5fc39.jpg",l="/static/3.17dbc5c1.jpg",a="/static/4.b3b2914a.jpg",E=JSON.parse('{"title":"ESLint 实践","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/1 前端工程化/3 开发/ESLint + Prettier/ESLint 实践.md","filePath":"frontend/1 前端工程化/3 开发/ESLint + Prettier/ESLint 实践.md"}'),p={name:"frontend/1 前端工程化/3 开发/ESLint + Prettier/ESLint 实践.md"},o=i('<h1 id="eslint-实践" tabindex="-1">ESLint 实践 <a class="header-anchor" href="#eslint-实践" aria-label="Permalink to &quot;ESLint 实践&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>ESLint 是一个检查代码质量与风格的工具，配置一套规则，就能检查出你代码中不符合规则的地方，部分问题支持自动修复；</p><p>总结起来就两个功能：</p><ul><li>代码质量检查\u2028可以发现代码中存在的可能错误，如使用未声明变量、声明而未使用的变量、修改 const 变量、代码中使用debugger等等</li><li>代码格式化\u2028可以用来统一团队的代码风格，比如加不加分号、使用 tab 还是空格、字符串使用单引号 等等</li></ul><p>ESLint是一个插件化的代码检测工具，正如它官网描述的slogan：</p><blockquote><p>可组装的JavaScript和JSX检查工具</p></blockquote><p>ESLint不仅可以检测JS，还支持JSX和Vue，它的高可扩展性让它能够支持更多的项目。</p><p>刚开始ESlint的推出并没有撼动JSHint的霸主地位，由于ESlint需要将源码转为AST，而JSHint直接检测源文件字符串，因此执行速度比JSHint慢很多；真正让ESLint实现弯道超车的是ES6的出现。</p><p>2015年，ES6规范发布后，由于大部分浏览器支持程度不高，因此需要Babel将代码转换编译成ES5或者更低版本；同时由于ES6变化很大，短期内JSHint无法完全支持，这时ESLint的高扩展性的优点显现出来了，不仅可以扩展规则，连默认的解析器也能替换；Babel团队就为ESLint开发了babel-eslint替换默认的解析器esprima，让ESLint率先支持ES6。</p><p>ESLint扩展性好；ESLint的核心是检测AST是否符合规则；</p><ol><li>第一步：解析器把源码转成AST；ESLint的解析器可自定义，源码用了啥高级语法或者换成TS，可直接换解析器得到最终的AST，eslint就可做规则匹配了；</li><li>第二步：执行规则；ESLint的检测规则可自定义；</li></ol><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>npm i eslint --save-dev</p><p>npx eslint --init // 生成 .eslintrc* 配置文件</p><p>一般我们会把eslint命令行配置到packages.json中：</p><p>&quot;scripts&quot;: { &quot;lint&quot;: &quot;npx eslint src”, &quot;lint:fix&quot;: &quot;npx eslint src --fix&quot;, &quot;lint:create&quot;: &quot;npx eslint --init&quot; }</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>包括全局变量、插件配置、规则配置、内嵌注释代码禁用规则，扩展配置、忽略文件和目录</p><p>root 配置</p><p>root: true 这个配置，这个配置是让eslint不要往父级去继续查找配置</p><p>globals和env 配置（对环境定义的一组全局变量的预设 详细看：<a href="https://zh-hans.eslint.org/docs/latest/use/configure/language-options" target="_blank" rel="noreferrer">https://zh-hans.eslint.org/docs/latest/use/configure/language-options</a> ）</p><p>通常我们在项目里面会使用很多全局变量，比如浏览器环境下的windows，node环境下的global等，通常一些规则集像eslint:recommended等，是会校验不过的，因为在它看来你是使用了未定义的变量，这个时候globals就派上用场了</p><p>&#39;globals&#39;: { // false、readable、readonly 这 3 个是等价的，表示变量只可读不可写； // true、writeable、writable 这 3 个是等价的，表示变量可读可写； &#39;$&#39;: true, &#39;jQuery&#39;: true, &#39;encode&#39;: false, },</p><p>但是像浏览器环境或者node环境全局变量有很多，一个个指定又太麻烦了，此时就可以使用env去指定环境，这样我们就无需一个个指定这个环境下的全局变量了</p><p>{ // 浏览器全局变量 browser: true, // Node.js 全局变量和作用域 node: true, // CommonJS全局变量和CommonJS作用域 commonjs: true, // 启用除模块之外的所有ECMAScript 6功能 es6: true }</p><p>extends 配置</p><p>继承另一个配置文件的所有特性</p><p>通常来讲extends可以分为以下几种：</p><ul><li>eslint开头的，就是eslint官方的扩展，如eslint:recommended(推荐规范)和eslint:all(所有规范)</li><li>eslint-config开头的，比如第三方发布到npm上的，如eslint-config-airbnb（airbnb的规范），eslint-config-alloy（腾讯Alloy team的规范）等</li><li>plugin开头的，就是通过插件共享的规则，如eslint-plugin-vue，我们使用其中的plugin:vue/vue3-recommended的规则集</li><li>@开头的，跟eslint-config开头的类似，只不过是加了作用域，例如@vue/eslint-config-prettier就是加了个作用域</li></ul><p>{ // extends可以是字符串，可以是数组，数组的时候就可以配置多个 extends: [ // eslint官方扩展，无需再安装npm包就可使用 &#39;eslint:recommended&#39;, // airbnb的扩展，需要先安装eslint-config-airbnb及其依赖才能使用，这种eslint-config-开头的可以省略前面的 // 比如直接传&#39;airbnb&#39;即可 &#39;eslint-config-airbnb&#39;, // @开头的，就是加了作用域，跟上面的类似，使用前也需要先安装，也可以省略调eslin-config // 比如直接传&#39;@vue/prettier&#39;即可 &#39;@vue/eslint-config-prettier&#39;, // plugin开头的，使用前需先安装，通常一个插件会提供多套规则，而我们则通过plugin:pluginName/configName这样的形式在extends中引入插件提供的规则，如下面使用的eslint-plugin-vue就有recommended|vue3-recommended等多套规则 &#39;plugin:vue/vue3-recommended&#39; ], }</p><p>parser和parserOptions</p><p>eslint默认的解析器是espree，只支持转换js，默认支持到ES5的语法，假如需要支持更高版本的语法，则可以通过parserOptions来指定版本号</p><p>{ parserOptions: { // 指定支持es6的语法 ecmaVersion: 6, // 默认是script，但我们现在都是模块，所以将它指定为module sourceType: &#39;module&#39;, ecmaFeatures: { // 启用jsx语法，如果不打开，当我们写jsx语法的时候，eslint就会校验不通过，因为它会认为&lt;不是一个合法的token jsx: true, } } }</p><p>默认的espree解释器和规则只支持最新的ECMAScript标准，对于一些还没成为标准的实验性语法是不支持的，此时就需要@babel/eslint-parser这个解释器了。当然，使用这个解释器的前提是你的项目使用了babel。当你使用了babel和这个解释器，babel首先会将源码转换成AST,然后这个解释器再将这个AST转换成eslint能动的ESTree</p><p>假设你项目使用了babel的情况下，parser的配置如下</p><p>{ // 使用前需先安装 parser: &#39;@babel/eslint-parser&#39;, parserOptions: { // @babel/eslint-parser相关的选项 } }</p><p>plugins 配置</p><p>上面对parser和extends做了详尽的介绍，而这里介绍一下上面提到的plugins。插件其中一个作用是可以共享配置，如上面介绍的配合extends来继承插件里面的规则，还有另一个最重要的作用是扩展eslint的规则，因为本身官方的规则只能检测js语法，如果是像vue这样的文件就无能为力了，此时就需要通过插件去完成了，比如上面也提到的eslint-plugin-vue，就是用来校验eslint本来不支持的vue模板文件的。</p><p>而通常我们使用插件，有两种用法，一种是像上面介绍的，通过extends去继承插件提供出来的规则集合。当然，前提是这个插件本身有提供出来相应的config。</p><p>rule 规则配置</p><ol><li>&quot;off&quot; 或 0： 关闭规则；</li><li>&quot;warn&quot; 或 1： 开启规则，使用警告级别的错误：warn (不会导致程序退出)；</li><li>&quot;error&quot; 或 2： 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)；</li></ol><p>内置规则：<a href="https://zh-hans.eslint.org/" target="_blank" rel="noreferrer">https://zh-hans.eslint.org/</a></p><p>Webstrom 配置 ESLint的autofix功能</p><p>1、项目绑定Eslint，并提示错误。 <img src="'+r+'" alt=""> ￼ 2、之后在编辑器中就会出现检测错误提示。 <img src="'+s+'" alt=""></p><p>3、文件 -&gt; 右键 -&gt; Fix ESLint Problems 会自动根据 Eslint 规则修复代码。 <img src="'+l+'" alt=""><img src="'+a+'" alt=""></p><h3 id="参考" tabindex="-1">参考： <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考：&quot;">​</a></h3><p>ESLint 命令行使用 <a href="https://www.jianshu.com/p/4133063d1785" target="_blank" rel="noreferrer">https://www.jianshu.com/p/4133063d1785</a></p><p>看完这篇文章，我不信你还对eslint一知半解 <a href="https://juejin.cn/post/7129771851638636575?searchId=202310111031309F0D69AD1F3EDF63BE94" target="_blank" rel="noreferrer">https://juejin.cn/post/7129771851638636575?searchId=202310111031309F0D69AD1F3EDF63BE94</a></p><p>深入浅出之ESLint <a href="https://juejin.cn/post/7028754877312401444?searchId=202310111031309F0D69AD1F3EDF63BE94" target="_blank" rel="noreferrer">https://juejin.cn/post/7028754877312401444?searchId=202310111031309F0D69AD1F3EDF63BE94</a></p>',50),c=[o];function u(d,b,h,g,m,S){return t(),n("div",null,c)}const q=e(p,[["render",u]]);export{E as __pageData,q as default};

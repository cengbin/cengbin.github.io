import{_ as e,o as l,c as t,O as o}from"./chunks/framework.d9e2f5d0.js";const s="/static/1.9bac2fc6.jpg",b=JSON.parse('{"title":"【登录】技术设计","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/管理后台 之 登录/README.md","filePath":"frontend/管理后台 之 登录/README.md"}'),r={name:"frontend/管理后台 之 登录/README.md"};function i(n,a,p,c,h,d){return l(),t("div",null,a[0]||(a[0]=[o(`<h1 id="【登录】技术设计" tabindex="-1">【登录】技术设计 <a class="header-anchor" href="#【登录】技术设计" aria-label="Permalink to &quot;【登录】技术设计&quot;">​</a></h1><p>总结软件开发中登录功能如何实现的。</p><h2 id="项目分析" tabindex="-1">项目分析 <a class="header-anchor" href="#项目分析" aria-label="Permalink to &quot;项目分析&quot;">​</a></h2><p>管理后台开发涉及两大核心基础功能，第一登录，第二权限管理。有了这两个基础功能之后才能进行不同的业务页面。</p><h2 id="功能设计" tabindex="-1">功能设计 <a class="header-anchor" href="#功能设计" aria-label="Permalink to &quot;功能设计&quot;">​</a></h2><p>登录包括以下几个基本功能：</p><ol><li>支持账号密码登录 <ul><li>账号密码校验</li><li>用户行为校验 <ol><li>验证码校验</li><li>短信校验</li><li>滑块校验 <ol><li><a href="https://www.bookstack.cn/read/anji-plus-captcha/f26c8bfb057c4a15.md" target="_blank" rel="noreferrer">https://www.bookstack.cn/read/anji-plus-captcha/f26c8bfb057c4a15.md</a></li><li>captcha <a href="https://github.com/anji-plus/captcha/" target="_blank" rel="noreferrer">https://github.com/anji-plus/captcha/</a></li></ol></li></ol></li><li>账号与密码加密</li><li>记住密码</li><li>sessionId与token存储</li></ul></li><li>支持第三方登录</li><li>支持跨系统间访问无需二次登录（单点登陆）</li></ol><h2 id="功能实现" tabindex="-1">功能实现 <a class="header-anchor" href="#功能实现" aria-label="Permalink to &quot;功能实现&quot;">​</a></h2><h3 id="账号-密码登录" tabindex="-1">账号/密码登录 <a class="header-anchor" href="#账号-密码登录" aria-label="Permalink to &quot;账号/密码登录&quot;">​</a></h3><p><strong>账号密码校验</strong></p><p>当用户在浏览器页面中输入账号密码，首先就要对用户的账号密码进行规则校验。在前端进行规则校验主要是为了<strong>提升用户体验</strong>、<strong>减轻服务器负担</strong>。</p><ol><li>提升用户体验 <ul><li>即时反馈：前端校验能够在用户输入信息时即时给出反馈，如必填项检查、格式错误提示等，避免用户提交后才发现错误，减少等待时间。</li><li>减少操作步骤：用户可以在输入过程中即时纠正错误，避免了提交后再重新填写表单的繁琐步骤。</li></ul></li><li>减轻服务器负担 <ul><li>过滤明显错误：前端校验可以过滤掉明显的输入错误，减少不必要的网络传输和服务器请求，从而减轻服务器压力。</li><li>分流正常请求：对于格式正确的数据，前端校验通过后，后端可以集中精力处理逻辑更为复杂的验证，如数据库查询等。</li><li>优化性能：减少无效请求，提高服务器的处理能力和响应速度，尤其在高流量情况下，这种分流尤为重要。</li></ul></li></ol><p><strong>常用格式校验</strong></p><p><strong>账号</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// 账号只能包含数字和字母。</span></span>
<span class="line"><span style="color:#e1e4e8;">// 账号长度大于等于8位，且小于等于16位，且必须包含字母数字</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// 账号只能包含数字和字母。</span></span>
<span class="line"><span style="color:#24292e;">// 账号长度大于等于8位，且小于等于16位，且必须包含字母数字</span></span></code></pre></div><p>密码</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span></code></pre></div><p>手机号</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span></code></pre></div><p>邮箱</p><p>身份证号</p><p><strong>sessionId 与 token 存储</strong></p><ul><li>将 Token 存储在 webStorage (localStorage, sessionStorage) 中可以通过同域的js访问，这样导致很容易受到 XSS 攻击，特别是项目中引入很多第三方 js 库的情况下，如果js脚本被盗用，攻击者就可以轻易访问你的网站。</li></ul><blockquote><p>跨站脚本攻击（XSS）：是一种注入代码攻击，通过在网站里注入script代码，当访问者浏览网站的时候通过注入的script代码窃取用户信息，盗用用户身份等</p></blockquote><ul><li>将Token 存储在 cookie 中，可以指定 httponly来防止js被读取，也可以指定 secure 来保证Token 只在 HTTPS 下传输，缺点是不符合RestFul 最佳实践，容易受到 CSRF 攻击。</li></ul><blockquote><p>跨站请求伪造（CSRF）：跨站点请求伪造，攻击者盗用已经认证过的用户信息，以用户信息的名义进行操作（转账，购买商品等），由于身份已经认证过了，所以网站会认为此操作是用户本人操作。CSRF 并不能拿到用户信息，但它可以盗用用户的凭证进行操作。</p></blockquote><p>表单提交：</p><p>前端做必填项检查、格式错误等等基本校验。 服务端对业务逻辑及数据正确性进行校验。</p><p>理由：考虑到如果有业务逻辑调整只需要服务端一端修改校验逻辑即可，前端不需要做业务逻辑校验调整。</p><h3 id="单点登录" tabindex="-1">单点登录 <a class="header-anchor" href="#单点登录" aria-label="Permalink to &quot;单点登录&quot;">​</a></h3><p><a href="https://sa-token.cc/doc.html#/sso/readme" target="_blank" rel="noreferrer">单点登录（Single Sign-On，简称SSO）</a></p><h4 id="背景-分析" tabindex="-1">背景（分析） <a class="header-anchor" href="#背景-分析" aria-label="Permalink to &quot;背景（分析）&quot;">​</a></h4><p>举个场景，假设我们的系统被切割为N个部分：商城、论坛、直播、社交…… 如果用户每访问一个模块都要登录一次，那么用户将会疯掉， 为了优化用户体验，我们急需一套机制将这N个系统的认证授权互通共享，让用户在一个系统登录之后，便可以畅通无阻的访问其它所有系统。<strong>单点登录</strong>就是为了解决这个问题而生！</p><h4 id="任务-目标" tabindex="-1">任务（目标） <a class="header-anchor" href="#任务-目标" aria-label="Permalink to &quot;任务（目标）&quot;">​</a></h4><p>简而言之，单点登录要做到： <strong>在多个互相信任的系统中，用户只需登录一次，就可以访问所有系统。</strong></p><blockquote><p>理论上用户只需要有一个公司账号就可以了，登录了这个账号就可以访问这个公司的所有产品。但是用户又比较值钱，所以大多数互联网公司都有自己的用户账号，比如：百度账号、淘宝账号、腾讯账号等等。</p></blockquote><h4 id="行动-实现方式" tabindex="-1">行动（实现方式） <a class="header-anchor" href="#行动-实现方式" aria-label="Permalink to &quot;行动（实现方式）&quot;">​</a></h4><h5 id="前端同域" tabindex="-1">前端同域 <a class="header-anchor" href="#前端同域" aria-label="Permalink to &quot;前端同域&quot;">​</a></h5><p>适用于同一个主域名下的多个子域名。通过在主域名设置共享的 Cookie，实现跨子域名的单点登录。</p><p>例如：baidu.com yun.baidu.com map.baidu.com</p><p><strong>实现步骤：</strong></p><ol><li>用户在主域名（如 <a href="http://example.com" target="_blank" rel="noreferrer">http://example.com</a>）登录后，服务器在该域名下设置一个 Cookie。</li><li>子域名（如 <a href="http://app1.example.com" target="_blank" rel="noreferrer">http://app1.example.com</a> 和 <a href="http://app2.example.com" target="_blank" rel="noreferrer">http://app2.example.com</a>）可以读取这个 Cookie，从而确认用户身份。</li></ol><h5 id="前端不同域" tabindex="-1">前端不同域 <a class="header-anchor" href="#前端不同域" aria-label="Permalink to &quot;前端不同域&quot;">​</a></h5><p>比如：taobao.com tmall.com</p><p><strong>实现步骤：</strong></p><p><img src="`+s+'" alt=""></p><h3 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h3><ul><li><a href="https://sa-token.cc/doc.html" target="_blank" rel="noreferrer">Sa-Token</a></li><li><a href="https://mp.weixin.qq.com/s/TyG7ZSutPHjTz-M1yT0sUg" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/TyG7ZSutPHjTz-M1yT0sUg</a></li></ul>',48)]))}const g=e(r,[["render",i]]);export{b as __pageData,g as default};

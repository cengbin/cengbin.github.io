import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.0f4e1e9e.js";const p="/static/1.4aa2464a.jpg",o="/static/2.b77f116d.jpg",F=JSON.parse('{"title":"深入理解 JavaScript 闭包","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/详解 之 闭包/README.md","filePath":"frontend/详解 之 闭包/README.md"}'),e={name:"frontend/详解 之 闭包/README.md"},c=l(`<h1 id="深入理解-javascript-闭包" tabindex="-1">深入理解 JavaScript 闭包 <a class="header-anchor" href="#深入理解-javascript-闭包" aria-label="Permalink to &quot;深入理解 JavaScript 闭包&quot;">​</a></h1><h2 id="_1-前言" tabindex="-1">1. 前言 <a class="header-anchor" href="#_1-前言" aria-label="Permalink to &quot;1. 前言&quot;">​</a></h2><p>面试的时候常常会有面试官会问：谈谈你对闭包的理解？</p><p>我觉得回答问题要有清晰的思路和逻辑顺序，如：</p><ol><li>描述实际问题是什么，以及问题产生的背景。</li><li>问题是怎么解决。</li><li>结果怎么样。</li></ol><p>我觉得按这样的思路回答问题，比按<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noreferrer">MDN</a> 上的解释说一遍回答“闭包（closure）是一个函数以及其捆绑的周边环境状态（lexical environment，词法环境）的引用的组合”要好。</p><p>接下来我将尝试按照这个思路回答【谈谈你对闭包的理解？】</p><ol><li>闭包产生的背景。（背景，及问题是什么）</li><li>闭包的实现机制。（怎么解决的）</li><li>闭包的应用场景。（带来了什么结果）</li></ol><h2 id="_2-闭包产生的背景" tabindex="-1">2. 闭包产生的背景 <a class="header-anchor" href="#_2-闭包产生的背景" aria-label="Permalink to &quot;2. 闭包产生的背景&quot;">​</a></h2><h3 id="_2-1-函数执行环境的问题" tabindex="-1">2.1 函数执行环境的问题 <a class="header-anchor" href="#_2-1-函数执行环境的问题" aria-label="Permalink to &quot;2.1 函数执行环境的问题&quot;">​</a></h3><p>在传统的<a href="http://en.wikipedia.org/wiki/Stack-oriented_programming_language" target="_blank" rel="noreferrer">面向堆栈的编程语言</a>中，函数的局部变量都是保存在栈上的，每当函数激活的时候，这些变量和函数参数都会压入到该堆栈上。 当函数返回的时候，这些参数又会从栈中移除。这种模型对将函数作为<strong>函数式值</strong>使用的时候有很大的限制，特别是在以下场景：</p><ul><li>函数作为返回值</li><li>函数作为参数传递</li><li>函数中包含自由变量</li></ul><blockquote><ol><li>在ECMAScript中，函数是可以封装在父函数中的，并<strong>可以使用父函数上下文的变量</strong>。</li><li><strong>自由变量</strong>是指<strong>在函数中使用</strong>的，但既<strong>不是函数参数</strong>也<strong>不是函数的局部变量</strong>的变量</li></ol></blockquote><h3 id="_2-2-funarg-问题详解" tabindex="-1">2.2 Funarg 问题详解 <a class="header-anchor" href="#_2-2-funarg-问题详解" aria-label="Permalink to &quot;2.2 Funarg 问题详解&quot;">​</a></h3><p>Funarg（函数参数）问题是闭包概念产生的直接导火索，主要分为两类：</p><h4 id="_2-2-1-向上引用的-funarg-问题-upward-funarg" tabindex="-1">2.2.1 向上引用的 Funarg 问题（Upward Funarg） <a class="header-anchor" href="#_2-2-1-向上引用的-funarg-问题-upward-funarg" aria-label="Permalink to &quot;2.2.1 向上引用的 Funarg 问题（Upward Funarg）&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(x); </span><span style="color:#6A737D;">// 如何访问已经执行完毕的foo函数中的x？</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fn</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 10</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bar</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x); </span><span style="color:#6A737D;">// 如何访问已经执行完毕的foo函数中的x？</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">fn</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 10</span></span></code></pre></div><h4 id="_2-2-2-向下引用的-funarg-问题-downward-funarg" tabindex="-1">2.2.2 向下引用的 Funarg 问题（Downward Funarg） <a class="header-anchor" href="#_2-2-2-向下引用的-funarg-问题-downward-funarg" aria-label="Permalink to &quot;2.2.2 向下引用的 Funarg 问题（Downward Funarg）&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">funArg</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">funArg</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 如何找到x变量？应该输出10还是20？</span></span>
<span class="line"><span style="color:#E1E4E8;">})(foo);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">foo</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">funArg</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">funArg</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// 如何找到x变量？应该输出10还是20？</span></span>
<span class="line"><span style="color:#24292E;">})(foo);</span></span></code></pre></div><p>为了解决上述问题，JavaScript 就引入了闭包的机制。</p><h2 id="_3-闭包的实现机制" tabindex="-1">3. 闭包的实现机制 <a class="header-anchor" href="#_3-闭包的实现机制" aria-label="Permalink to &quot;3. 闭包的实现机制&quot;">​</a></h2><h3 id="_3-1-词法作用域-lexical-scope" tabindex="-1">3.1 词法作用域（Lexical Scope） <a class="header-anchor" href="#_3-1-词法作用域-lexical-scope" aria-label="Permalink to &quot;3.1 词法作用域（Lexical Scope）&quot;">​</a></h3><p>JavaScript 采用静态（词法）作用域，这意味着函数的作用域在函数定义时就已确定，而非函数调用时。</p><p><strong>再次强调下：ECMAScript 只使用<a href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping" target="_blank" rel="noreferrer">静态（词法）作用域</a> 。</strong> ( 而诸如Perl这样的语言，既可以使用静态作用域也可以使用动态作用域进行变量声明）。</p><h3 id="_3-2-作用域链与闭包" tabindex="-1">3.2 作用域链与闭包 <a class="header-anchor" href="#_3-2-作用域链与闭包" aria-label="Permalink to &quot;3.2 作用域链与闭包&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">function foo(){}</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">// foo函数执行上下文</span></span>
<span class="line"><span style="color:#e1e4e8;">fooContext = {</span></span>
<span class="line"><span style="color:#e1e4e8;">    VO:{...}, // 变量对象</span></span>
<span class="line"><span style="color:#e1e4e8;">    this:thisValue, // this值是执行上下文一属性</span></span>
<span class="line"><span style="color:#e1e4e8;">    Scope, // 函数作用域链</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">function foo(){}</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">// foo函数执行上下文</span></span>
<span class="line"><span style="color:#24292e;">fooContext = {</span></span>
<span class="line"><span style="color:#24292e;">    VO:{...}, // 变量对象</span></span>
<span class="line"><span style="color:#24292e;">    this:thisValue, // this值是执行上下文一属性</span></span>
<span class="line"><span style="color:#24292e;">    Scope, // 函数作用域链</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><p>foo函数创建时，会形成以下重要的内部属性：</p><ul><li>[[Scopes]] - 保存函数创建时的词法环境</li><li>作用域链（Scope Chain）- 函数执行上下文作用域链 fooContext.Scope = fooContext.AO + foo.[[Scopes]]</li></ul><p>技术上说，创建foo函数的父级上下文的数据是保存在该函数的内部属性 [[Scopes]]中的。</p><p>但是 JS 引擎怎么知道它要用到哪些外部引用呢，需要做 AST 扫描，很多 JS 引擎会做 Lazy Parsing，这时候去 parse 函数，正好也能知道它用到了哪些外部引用，然后把这些外部用打包成 Closure 闭包，加到 [[scopes]] 中。</p><p>如下图：firstClosure函数在创建完成之后，函数内部引用的自由变量就已经打包成Closure闭包，挂到函数的[[Scopes]]上了。</p><p><img src="`+p+'" alt="1.png"></p><p>调用 firstClosure 函数的时候，JS 引擎 会取出 [[Scopes]] 中的打包的 Closure + Global 链，设置成新的作用域链， 这就是函数用到的所有外部环境了，有了外部环境，自然就可以运行了。</p><p><img src="'+o+`" alt="2.jpg"></p><h2 id="_4-闭包的应用场景" tabindex="-1">4. 闭包的应用场景 <a class="header-anchor" href="#_4-闭包的应用场景" aria-label="Permalink to &quot;4. 闭包的应用场景&quot;">​</a></h2><ul><li>避免命名空间污染：模块要用多个变量，我们希望变量不影响全局，全局也不影响我们的变量。</li><li>模拟私有属性</li><li>有状态的函数</li></ul><h3 id="_4-1-模块化模式" tabindex="-1">4.1 模块化模式 <a class="header-anchor" href="#_4-1-模块化模式" aria-label="Permalink to &quot;4.1 模块化模式&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> privateData </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">privateMethod</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">publicMethod</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">privateMethod</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">})();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> privateData </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">privateMethod</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">publicMethod</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">privateMethod</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">})();</span></span></code></pre></div><h3 id="_4-2-数据私有化" tabindex="-1">4.2 数据私有化 <a class="header-anchor" href="#_4-2-数据私有化" aria-label="Permalink to &quot;4.2 数据私有化&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPerson</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> _name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> _name;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newName</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            _name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newName;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPerson</span><span style="color:#24292E;">(</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> _name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> _name;</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#E36209;">newName</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            _name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newName;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_4-3-函数工厂" tabindex="-1">4.3 函数工厂 <a class="header-anchor" href="#_4-3-函数工厂" aria-label="Permalink to &quot;4.3 函数工厂&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> y;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">multiplyByTwo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">multiply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">y</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> y;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">multiplyByTwo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">multiply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="_5-闭包的性能考量" tabindex="-1">5. 闭包的性能考量 <a class="header-anchor" href="#_5-闭包的性能考量" aria-label="Permalink to &quot;5. 闭包的性能考量&quot;">​</a></h2><h3 id="_5-1-内存管理" tabindex="-1">5.1 内存管理 <a class="header-anchor" href="#_5-1-内存管理" aria-label="Permalink to &quot;5.1 内存管理&quot;">​</a></h3><ul><li>如果一个变量被闭包对象 Closure 引用，无法被释放回收。</li><li>如果一个很大的对象被闭包对象 Closure 引用，本来函数调用结束就能销毁，但是现在引用却被通过闭包保存到了堆里，而且还一直用不到，那这块堆内存就一直没法使用，严重到一定程度就算是内存泄漏了。</li><li>闭包函数又在多个地方被引用，导致数据引用复杂，容易发生内存泄漏问题。</li></ul><h3 id="_5-2-优化建议" tabindex="-1">5.2 优化建议 <a class="header-anchor" href="#_5-2-优化建议" aria-label="Permalink to &quot;5.2 优化建议&quot;">​</a></h3><ol><li>避免创建不必要的闭包（使用面向对象编程）</li><li>及时清理不再使用的闭包</li><li>在循环中创建闭包时要特别注意</li></ol><p>至此通过清晰的回答，面试官会对你肯定刮目相看。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://developers.weixin.qq.com/community/develop/article/doc/00066a46588a682cc21ca8a335b013" target="_blank" rel="noreferrer">JavaScript 的静态作用域链与“动态”闭包链</a></li><li><a href="https://juejin.cn/post/7084549768067678245?share_token=81B8021F-F924-477C-AC49-47071C69927E" target="_blank" rel="noreferrer">闭包是什么？从为什么会有闭包讲起！</a></li></ul>`,50),t=[c];function r(i,E,y,d,u,h){return a(),n("div",null,t)}const f=s(e,[["render",r]]);export{F as __pageData,f as default};

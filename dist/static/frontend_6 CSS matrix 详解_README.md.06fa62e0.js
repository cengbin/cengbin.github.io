import{_ as t,o as r,c as e,Q as a,k as o}from"./chunks/framework.0f4e1e9e.js";const n="/static/a.0ec79bd9.jpg",u=JSON.parse('{"title":"CSS transform: matrix();","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/6 CSS matrix 详解/README.md","filePath":"frontend/6 CSS matrix 详解/README.md"}'),s={name:"frontend/6 CSS matrix 详解/README.md"},p=a('<h1 id="css-transform-matrix" tabindex="-1">CSS transform: matrix(); <a class="header-anchor" href="#css-transform-matrix" aria-label="Permalink to &quot;CSS transform: matrix();&quot;">​</a></h1><p>一个元素渲染后就可以得到一张位图，然后对这个位图上每一点进行变换，就可以得到新的一张位图，从而产生了视觉上的平移translate、旋转rotate、缩放scale、拉伸skew 等效果。这一切都是变换矩阵的功劳。</p><p>selector { transform: matrix(a, b, c, d, e, f); }</p><p><img src="'+n+'" alt=""></p><p>2D 的转换是由一个 3*3 的矩阵表示的，前两行代表转换的值，分别是 a b c d e f，要注意是竖着排的，第一行代表 x 轴发生的变化，第二行代表 y 轴发生的变化，第三行代表 z 轴发生的变化，因为这里是 2D 不涉及 z 轴，所以这里是 0 0 1。</p><h3 id="缩放" tabindex="-1">缩放 <a class="header-anchor" href="#缩放" aria-label="Permalink to &quot;缩放&quot;">​</a></h3><p>缩放对应的是矩阵中的 a 和 d，x 轴的缩放比例对应 a，y 轴的缩放比例对应 d。</p><p>transform: scale(1.5, 1.2);</p><p>a=1.5 d=1.2</p><p>transform: matrix(1.5, 0, 0, 2, 0, 0);</p><h3 id="平移" tabindex="-1">平移 <a class="header-anchor" href="#平移" aria-label="Permalink to &quot;平移&quot;">​</a></h3><p>平移对应的是矩阵中的 e 和 f，平移的 x 和 y 分别对应 e 和 f。</p><p>transform: translate(10, 20)</p><p>e=10 f=20</p><p>transform: matrix(a, b, c, d, 10, 20);</p><h3 id="旋转" tabindex="-1">旋转 <a class="header-anchor" href="#旋转" aria-label="Permalink to &quot;旋转&quot;">​</a></h3><p>旋转影响的是a/b/c/d四个值，分别是什么呢？</p><p>a=cosθ b=sinθ c=-sinθ d=cosθ</p><p>如果要计算 30° 的sin值：</p><p>// 弧度和角度的转换公式：弧度=π/180×角度</p><p>const radian = Math.PI / 180 * 30 // 算出弧度</p><p>const sin = Math.sin(radian) // 计算 sinθ const cos = Math.cos(radian) // 计算 cosθ</p><p>console.log(sin, cos) // 输出 ≈ 0.5, 0.866</p><p>如果我们不考虑缩放和偏移，只旋转30°，矩阵应该表示为</p><p>transform: rotate(30deg)</p><p>a=0.866 b=0.5 c=-0.5 d=0.866</p><p>transform: matrix(0.866, 0.5, -0.5, 0.866, 0, 0);</p><h3 id="拉伸" tabindex="-1">拉伸 <a class="header-anchor" href="#拉伸" aria-label="Permalink to &quot;拉伸&quot;">​</a></h3><p>拉伸也是由两个参数组成，x 轴和 y 轴，分别对应矩阵中的 c 和 b。 是 x 对应 c，y 对应 b， 这个对应并不是相等，需要对 skew 的 x 值 和 y 值进行 tan 运算。</p><p>transform: skew(20deg, 30deg);</p><p>b=tan30° c=tan20°</p>',31),i=o("p",{const:"",radian:"",class:"MathPI",180:"","*":"",deg:"",return:"","Math.tan(radian)":""},"// 先创建一个方法，直接返回角度的tan值 function tan (deg)",-1),c=a('<p>const b = tan(30) const c = tan(20) console.log(b, c) // 输出 ≈ 0.577, 0.364</p><p>b=0.577 c=0.364</p><p>transform: matrix(1, 0.577, 0.364, 1, 0, 0)</p><p>矩阵可以对向量进行转换?</p><h3 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h3><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform-function</a></p></li><li><p><a href="https://juejin.cn/post/6844903616629719054" target="_blank" rel="noreferrer">理解 CSS3 transform 中的 matrix</a></p></li></ul>',6),d=[p,i,c];function l(h,m,_,f,b,x){return r(),e("div",null,d)}const C=t(s,[["render",l]]);export{u as __pageData,C as default};

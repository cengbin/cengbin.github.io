import{_ as a,o as e,c as s,Q as t}from"./chunks/framework.0f4e1e9e.js";const n="/static/timing-overview.35cc19eb.png",b=JSON.parse('{"title":"页面性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/2 前端优化/页面性能优化/README.md","filePath":"frontend/2 前端优化/页面性能优化/README.md"}'),l={name:"frontend/2 前端优化/页面性能优化/README.md"},p=t('<h1 id="页面性能优化" tabindex="-1">页面性能优化 <a class="header-anchor" href="#页面性能优化" aria-label="Permalink to &quot;页面性能优化&quot;">​</a></h1><p><img src="'+n+`" alt=""></p><p>这里我们所谈论的页面优化，其实就是要让页面更快地显示、响应、用户体验更好。</p><h2 id="加载阶段" tabindex="-1">加载阶段 <a class="header-anchor" href="#加载阶段" aria-label="Permalink to &quot;加载阶段&quot;">​</a></h2><p>核心的优化原则是：优化关键资源的加载速度，减少关键资源个数，降低关键资源大小，降低关键资源的 RTT 次数。</p><h3 id="理论1-优化关键资源的加载速度" tabindex="-1">理论1：优化关键资源的加载速度 <a class="header-anchor" href="#理论1-优化关键资源的加载速度" aria-label="Permalink to &quot;理论1：优化关键资源的加载速度&quot;">​</a></h3><p>方法一：DNS预解析</p><p>实践：</p><p><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;https://fonts.googleapis.com/&quot;&gt;</code></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/dns-prefetch" target="_blank" rel="noreferrer">MDN参考</a></p><p>方法二：资源预加载</p><p>实践：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;head&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;meta charset=&quot;utf-8&quot;&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;title&gt;JS and CSS preload example&lt;/title&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;link rel=&quot;preload&quot; href=&quot;style.css&quot; as=&quot;style&quot;&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;link rel=&quot;preload&quot; href=&quot;main.js&quot; as=&quot;script&quot;&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/head&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;h1&gt;bouncing balls&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;canvas&gt;&lt;/canvas&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">  &lt;script src=&quot;main.js&quot; defer&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;/body&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;head&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;meta charset=&quot;utf-8&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;title&gt;JS and CSS preload example&lt;/title&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  &lt;link rel=&quot;preload&quot; href=&quot;style.css&quot; as=&quot;style&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;link rel=&quot;preload&quot; href=&quot;main.js&quot; as=&quot;script&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/head&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;h1&gt;bouncing balls&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#24292e;">  &lt;canvas&gt;&lt;/canvas&gt;</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">  &lt;script src=&quot;main.js&quot; defer&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#24292e;">&lt;/body&gt;</span></span></code></pre></div><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload" target="_blank" rel="noreferrer">MDN参考</a></p><p>方法三：利用浏览器缓存机制</p><p>HTTP1.0 实践：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">expires: Tue, 16 Aug 2022 11:45:06 GMT</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">expires: Tue, 16 Aug 2022 11:45:06 GMT</span></span></code></pre></div><p>HTTP1.1 实践</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">cache-control: max-age=30000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">cache-control: max-age=30000</span></span></code></pre></div><p>注意：由于index.html提供了需要加载资源的URL，所以index.html最好不要设置缓存或者设置较短的缓存时间。</p><p><a href="https://www.taobao.com/" target="_blank" rel="noreferrer">https://www.taobao.com/</a> <code>cache-control: max-age=0, s-maxage=142</code></p><p><a href="https://www.jd.com/" target="_blank" rel="noreferrer">https://www.jd.com/</a> <code>Cache-Control: max-age=30</code></p><p>方法四：gzip压缩</p><p>实践：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">content-encoding: gzip</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">content-encoding: gzip</span></span></code></pre></div><p>方法五：打破浏览器建立TCP链接数量限制</p><p>实践：不同类型静态资源放在不同的服务器，使用不同的域名。</p><h3 id="理论2-减少关键资源个数" tabindex="-1">理论2：减少关键资源个数 <a class="header-anchor" href="#理论2-减少关键资源个数" aria-label="Permalink to &quot;理论2：减少关键资源个数&quot;">​</a></h3><p>方法一：合并CSS、JS</p><p>并不是把应用中的所有的都合并成一个js文件，应该把业务逻辑和库文件分开。项目迭代更新的时候只需要更新业务逻辑代码即可。让库文件走缓存。另外游戏渲染库比较大，如果web应用运行在app上，app如果能把这些库文件打包到app里面 app监测网络请求如果监测到是特定的渲染库，直接走app本地库文件效果更好，几乎就是秒加载。</p><p>并不是把所有的都合并成一个CSS，框架CSS和单个页面样式分开打包（不同页面的CSS异步加载，首次进入只加载首屏CSS）。</p><p>方法二：合并图片</p><ul><li>多张图片合并成雪碧图（又叫精灵图），工具有TexturePacker，在CSS中用背景+定位的形式渲染图片，减少资源请求量。</li><li>合并多个图标放在一个svg中</li></ul><p>方法三：异步加载资源</p><p>非首屏内容涉及到的资源异步加载，利用webpack提供的import()方法异步加载资源。</p><p>方法四：SVG内嵌</p><p>svg矢量图，代码内嵌，相对较小。</p><p>方法五：图片转Base64数据</p><p>将图片内签到html中，减少http请求，适用于较小的图片。比如只有1kb这类图片资源 我们可以直接把图片资源转成base64数据，然后打包到文件中这个图片资源请求就没有了。</p><p>方法六：合并音频</p><p>“点击” “升级” 这种短的音效多个音频合并成一个音频，需要播放的时候播放这个一个音频中的某一个段就好了，减少资源加载数量。</p><h3 id="理论3-降低关键资源大小" tabindex="-1">理论3：降低关键资源大小 <a class="header-anchor" href="#理论3-降低关键资源大小" aria-label="Permalink to &quot;理论3：降低关键资源大小&quot;">​</a></h3><p><strong>方法一:</strong> 压缩HTML、CSS、JS</p><p>利用Gulp、Webpack工具压缩资源</p><p><strong>方法二:</strong> 压缩图片</p><ul><li>压缩图片到一个合适的质量，没必须所有的图片都用2倍高清图片可以和设计沟通把部分图片质量稍微调底一些。这种方式效果比较可观。图片压缩网站：<a href="https://tinypng.com/%E3%80%82" target="_blank" rel="noreferrer">https://tinypng.com/。</a></li><li>使用Chrome浏览器支持的.webp格式</li></ul><h3 id="理论4-降低关键资源的-rtt-次数" tabindex="-1">理论4：降低关键资源的 RTT 次数 <a class="header-anchor" href="#理论4-降低关键资源的-rtt-次数" aria-label="Permalink to &quot;理论4：降低关键资源的 RTT 次数&quot;">​</a></h3><p>可以通过减少关键资源的个数和减少关键资源的大小搭配来实现。除此之外，还可以使用 CDN 来减少每次 RTT 时长。</p><h2 id="交互阶段" tabindex="-1">交互阶段 <a class="header-anchor" href="#交互阶段" aria-label="Permalink to &quot;交互阶段&quot;">​</a></h2><h3 id="减少-javascript-脚本执行时间" tabindex="-1">减少 JavaScript 脚本执行时间 <a class="header-anchor" href="#减少-javascript-脚本执行时间" aria-label="Permalink to &quot;减少 JavaScript 脚本执行时间&quot;">​</a></h3><ul><li>一种是将一次执行的函数分解为多个任务，使得每次的执行时间不要过久。</li><li>另一种是采用 Web Workers。</li></ul><p>总之，在交互阶段，对 JavaScript 脚本总的原则就是不要一次霸占太久主线程。</p><h3 id="避免强制同步布局" tabindex="-1">避免强制同步布局 <a class="header-anchor" href="#避免强制同步布局" aria-label="Permalink to &quot;避免强制同步布局&quot;">​</a></h3><p>所谓强制同步布局，是指 JavaScript 强制将计算样式和布局操作提前到当前的任务中。</p><h3 id="避免布局抖动" tabindex="-1">避免布局抖动 <a class="header-anchor" href="#避免布局抖动" aria-label="Permalink to &quot;避免布局抖动&quot;">​</a></h3><h3 id="合理利用-css-合成动画" tabindex="-1">合理利用 CSS 合成动画 <a class="header-anchor" href="#合理利用-css-合成动画" aria-label="Permalink to &quot;合理利用 CSS 合成动画&quot;">​</a></h3><h3 id="避免频繁的垃圾回收" tabindex="-1">避免频繁的垃圾回收 <a class="header-anchor" href="#避免频繁的垃圾回收" aria-label="Permalink to &quot;避免频繁的垃圾回收&quot;">​</a></h3><p>在交互阶段，核心的优化原则是：尽量减少一帧的生成时间。可以通过减少单次 JavaScript 的执行时间、避免强制同步布局、避免布局抖动、尽量采用 CSS 的合成动画、避免频繁的垃圾回收等方式来减少一帧生成的时长。</p><h5 id="参考" tabindex="-1">参考： <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考：&quot;">​</a></h5><p><a href="https://mp.weixin.qq.com/s/_I9UVfDJh0bA28aw9PUs2Q" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/_I9UVfDJh0bA28aw9PUs2Q</a></p>`,60),o=[p];function r(c,i,h,d,u,g){return e(),s("div",null,o)}const m=a(l,[["render",r]]);export{b as __pageData,m as default};

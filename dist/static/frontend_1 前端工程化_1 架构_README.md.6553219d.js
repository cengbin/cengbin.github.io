import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.0f4e1e9e.js";const E=JSON.parse('{"title":"架构","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/1 前端工程化/1 架构/README.md","filePath":"frontend/1 前端工程化/1 架构/README.md"}'),r={name:"frontend/1 前端工程化/1 架构/README.md"},n=o('<h1 id="架构" tabindex="-1">架构 <a class="header-anchor" href="#架构" aria-label="Permalink to &quot;架构&quot;">​</a></h1><p>在我的工作经历中架构主要还是业务架构，咱们在开发企业级应用的时候会选择<a href="./微前端/README.html">微前端架构设计</a>，为什么选择这种架构模式主要是因为现实情况，如：跨团队开发、跨技术栈开发、独立开发、独立部署等等。</p><p>现在市面上的框架层出不进，更新速度也比较快。从2016的Vue2 到2021的Vue3，很多库也是依赖于这些框架的。那我们的项目到底要不要升级到最新的Vue3，以及如何升级，升级后的收益比如何？这些往往是主要考虑的。但是如果不升级后面的这些框架新特性，以及相关的库很有可能你又用不了。往往咱们就被这些框架所绑定了。</p><p>如何做到“我们用框架，而不是我们被框架绑定“？</p><p>通过微前端的架构这样的设计模式可以做到与技术栈无关、增加升级这些。</p><p>那在单个子模块开发的时候也要做技术选型，在做选型的时候，我往往会考虑以下几个因素：</p><ol><li>是否符合团队的技术栈</li><li>是否符合项目需求</li><li>生态圈是否完善、社区是否活跃</li></ol><p>对于大型的企业来说：“是我们用框架，而不是我们被框架绑定。”</p>',8),_=[n];function i(p,s,l,c,d,f){return t(),a("div",null,_)}const m=e(r,[["render",i]]);export{E as __pageData,m as default};

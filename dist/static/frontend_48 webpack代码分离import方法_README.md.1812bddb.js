import{_ as a,o as s,c as n,O as p}from"./chunks/framework.d9e2f5d0.js";const l="/static/img1.76103b21.jpg",o="/static/img2.f068788b.jpg",b=JSON.parse('{"title":"webpack 代码分离(import方法)","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/48 webpack代码分离import方法/README.md","filePath":"frontend/48 webpack代码分离import方法/README.md"}'),t={name:"frontend/48 webpack代码分离import方法/README.md"};function i(r,e,c,d,m,h){return s(),n("div",null,e[0]||(e[0]=[p(`<h1 id="webpack-代码分离-import方法" tabindex="-1">webpack 代码分离(import方法) <a class="header-anchor" href="#webpack-代码分离-import方法" aria-label="Permalink to &quot;webpack 代码分离(import方法)&quot;">​</a></h1><h2 id="动态导入-dynamic-imports" tabindex="-1">动态导入(dynamic imports) <a class="header-anchor" href="#动态导入-dynamic-imports" aria-label="Permalink to &quot;动态导入(dynamic imports)&quot;">​</a></h2><p>当涉及到动态代码拆分时，webpack 提供了两个类似的技术。第一种，也是推荐选择的方式是，使用符合 ECMAScript 提案 的 import() 语法 来实现动态导入。第二种，则是 webpack 的遗留功能，使用 webpack 特定的 require.ensure。</p><blockquote><p>import() 调用会在内部用到 promises。如果在旧版本浏览器中使用 import()，记得使用一个 polyfill 库（例如 es6-promise 或 promise-polyfill），来 shim Promise。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// c.js</span></span>
<span class="line"><span style="color:#e1e4e8;">export default {</span></span>
<span class="line"><span style="color:#e1e4e8;">  key: &#39;something&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// c.js</span></span>
<span class="line"><span style="color:#24292e;">export default {</span></span>
<span class="line"><span style="color:#24292e;">  key: &#39;something&#39;</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">import(&#39;./c.js&#39;).then(res =&gt; {</span></span>
<span class="line"><span style="color:#e1e4e8;">  console.log(&#39;???: &#39;, res);</span></span>
<span class="line"><span style="color:#e1e4e8;">})</span></span>
<span class="line"><span style="color:#e1e4e8;">console.log(&#39;main.js&#39;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">import(&#39;./c.js&#39;).then(res =&gt; {</span></span>
<span class="line"><span style="color:#24292e;">  console.log(&#39;???: &#39;, res);</span></span>
<span class="line"><span style="color:#24292e;">})</span></span>
<span class="line"><span style="color:#24292e;">console.log(&#39;main.js&#39;);</span></span></code></pre></div><h2 id="分析" tabindex="-1">分析 <a class="header-anchor" href="#分析" aria-label="Permalink to &quot;分析&quot;">​</a></h2><p>以上代码，执行npm run build后，输出的js文件有两个：main.bundle.js和0.bundle.js，其中main.bundle.js首先插入script中执行，0.bunlde.js是动态引入的，其内容如下，主要包裹了c.js：</p><h3 id="_0-bundle-js" tabindex="-1">0.bundle.js: <a class="header-anchor" href="#_0-bundle-js" aria-label="Permalink to &quot;0.bundle.js:&quot;">​</a></h3><p><img src="`+l+'" alt="c.js"></p><h3 id="main-bundle-js" tabindex="-1">main.bundle.js <a class="header-anchor" href="#main-bundle-js" aria-label="Permalink to &quot;main.bundle.js&quot;">​</a></h3><p>是一个立即执行函数，入参如下图，主要包裹着main.js的内容，其中会动态引入0.bundle.js(包裹着c.js这个module)：</p><p><img src="'+o+'" alt="mian.js"></p><p>主要就是webpack_require.e这个方法，webpack_require.e会返回promise</p><h2 id="参考链接" tabindex="-1">参考链接 <a class="header-anchor" href="#参考链接" aria-label="Permalink to &quot;参考链接&quot;">​</a></h2><ul><li><a href="https://webpack.docschina.org/guides/code-splitting/#%E5%8A%A8%E6%80%81%E5%AF%BC%E5%85%A5-dynamic-imports-" target="_blank" rel="noreferrer">webpack 代码分离</a></li><li><a href="https://www.jianshu.com/p/65ad66d72e7d" target="_blank" rel="noreferrer">https://www.jianshu.com/p/65ad66d72e7d</a></li></ul>',16)]))}const k=a(t,[["render",i]]);export{b as __pageData,k as default};

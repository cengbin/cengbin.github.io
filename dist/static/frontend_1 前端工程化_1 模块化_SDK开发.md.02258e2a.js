import{_ as l,o as s,c as a,Q as n}from"./chunks/framework.0f4e1e9e.js";const d=JSON.parse('{"title":"SDK 开发指南","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/1 前端工程化/1 模块化/SDK开发.md","filePath":"frontend/1 前端工程化/1 模块化/SDK开发.md"}'),i={name:"frontend/1 前端工程化/1 模块化/SDK开发.md"},o=n(`<h1 id="sdk-开发指南" tabindex="-1">SDK 开发指南 <a class="header-anchor" href="#sdk-开发指南" aria-label="Permalink to &quot;SDK 开发指南&quot;">​</a></h1><h2 id="一、背景-situation" tabindex="-1">一、背景（Situation） <a class="header-anchor" href="#一、背景-situation" aria-label="Permalink to &quot;一、背景（Situation）&quot;">​</a></h2><p>在前端项目开发中，经常会遇到多个项目需要使用相同的功能模块的情况。为了避免代码重复，提高开发效率，我们需要将这些<strong>公共基础模块</strong>和<strong>公共业务模块</strong>进行抽离和封装，开发成独立的SDK（软件开发工具包）。</p><h2 id="二、目标-task" tabindex="-1">二、目标（Task） <a class="header-anchor" href="#二、目标-task" aria-label="Permalink to &quot;二、目标（Task）&quot;">​</a></h2><ol><li><p>抽离和封装可复用的代码模块</p><ul><li>识别并提取项目中的通用逻辑和公共业务逻辑</li><li>将这些逻辑封装成标准化的SDK</li><li>发布到NPM供团队使用</li></ul></li><li><p>优化项目架构</p><ul><li>降低项目复杂度</li><li>提升代码可维护性</li><li>提高开发效率</li><li>确保代码质量</li></ul></li></ol><h2 id="三、实施方案-action" tabindex="-1">三、实施方案（Action） <a class="header-anchor" href="#三、实施方案-action" aria-label="Permalink to &quot;三、实施方案（Action）&quot;">​</a></h2><h3 id="_1-模块划分" tabindex="-1">1. 模块划分 <a class="header-anchor" href="#_1-模块划分" aria-label="Permalink to &quot;1. 模块划分&quot;">​</a></h3><h4 id="_1-1-公共基础模块" tabindex="-1">1.1 公共基础模块 <a class="header-anchor" href="#_1-1-公共基础模块" aria-label="Permalink to &quot;1.1 公共基础模块&quot;">​</a></h4><ul><li>工具函数库（utils） <ul><li>日期处理</li><li>数据转换</li><li>字符串处理</li><li>数组/对象操作</li></ul></li><li>正则表达式库（regex） <ul><li>常用验证规则</li><li>格式化规则</li></ul></li><li>网络请求封装（http）</li><li>本地存储封装（storage）</li></ul><h4 id="_1-2-公共业务模块" tabindex="-1">1.2 公共业务模块 <a class="header-anchor" href="#_1-2-公共业务模块" aria-label="Permalink to &quot;1.2 公共业务模块&quot;">​</a></h4><ul><li>地图服务（map-service） <ul><li>腾讯地图集成</li><li>坐标转换</li><li>地理围栏判断（isPointInRing）</li><li>距离计算</li></ul></li><li>用户认证（auth）</li><li>支付功能（payment）</li></ul><h3 id="_2-开发规范" tabindex="-1">2. 开发规范 <a class="header-anchor" href="#_2-开发规范" aria-label="Permalink to &quot;2. 开发规范&quot;">​</a></h3><ol><li><p>代码规范</p><ul><li>遵循 ESLint 规则</li><li>使用 TypeScript 进行开发</li><li>编写清晰的注释</li></ul></li><li><p>模块设计</p><ul><li>高内聚低耦合</li><li>接口设计符合直觉</li><li>保持向后兼容</li></ul></li></ol><h3 id="_3-文档规范" tabindex="-1">3. 文档规范 <a class="header-anchor" href="#_3-文档规范" aria-label="Permalink to &quot;3. 文档规范&quot;">​</a></h3><ol><li><p>README.md</p><ul><li>项目介绍</li><li>安装方法</li><li>快速开始</li><li>使用示例</li></ul></li><li><p>API文档</p><ul><li>接口说明</li><li>参数类型</li><li>返回值</li><li>错误处理</li></ul></li><li><p>更新日志（CHANGELOG）</p></li></ol><h3 id="_4-质量保证" tabindex="-1">4. 质量保证 <a class="header-anchor" href="#_4-质量保证" aria-label="Permalink to &quot;4. 质量保证&quot;">​</a></h3><ol><li><p>单元测试</p><ul><li>Jest 测试框架</li><li>测试覆盖率 &gt; 80%</li></ul></li><li><p>持续集成</p><ul><li>自动化测试</li><li>自动化构建</li><li>自动化发布</li></ul></li></ol><h2 id="四、预期成果-result" tabindex="-1">四、预期成果（Result） <a class="header-anchor" href="#四、预期成果-result" aria-label="Permalink to &quot;四、预期成果（Result）&quot;">​</a></h2><ol><li><p>技术成果</p><ul><li>完整的SDK工具包</li><li>规范的API文档</li><li>完善的测试用例</li><li>NPM包发布</li></ul></li><li><p>业务价值</p><ul><li>提高开发效率30%以上</li><li>减少代码重复</li><li>降低维护成本</li><li>提升代码质量</li></ul></li></ol><h2 id="五、最佳实践" tabindex="-1">五、最佳实践 <a class="header-anchor" href="#五、最佳实践" aria-label="Permalink to &quot;五、最佳实践&quot;">​</a></h2><ol><li><p>版本管理</p><ul><li>遵循语义化版本（Semantic Versioning）</li><li>及时更新CHANGELOG</li></ul></li><li><p>发布流程</p><ul><li>预发布版本测试</li><li>正式版本发布</li><li>版本回滚机制</li></ul></li><li><p>使用示例</p></li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 安装</span></span>
<span class="line"><span style="color:#E1E4E8;">npm install awesome.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用示例</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { isPointInRing } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;awesome.ts&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">point</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { lat: </span><span style="color:#79B8FF;">39.9</span><span style="color:#E1E4E8;">, lng: </span><span style="color:#79B8FF;">116.3</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">area</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#6A737D;">/* 多边形坐标数组 */</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isInArea</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPointInRing</span><span style="color:#E1E4E8;">(point, area);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 安装</span></span>
<span class="line"><span style="color:#24292E;">npm install awesome.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用示例</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { isPointInRing } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;awesome.ts&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">point</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { lat: </span><span style="color:#005CC5;">39.9</span><span style="color:#24292E;">, lng: </span><span style="color:#005CC5;">116.3</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">area</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#6A737D;">/* 多边形坐标数组 */</span><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isInArea</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isPointInRing</span><span style="color:#24292E;">(point, area);</span></span></code></pre></div>`,22),p=[o];function e(t,r,c,u,E,h){return s(),a("div",null,p)}const _=l(i,[["render",e]]);export{d as __pageData,_ as default};

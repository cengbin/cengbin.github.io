import{_ as t,o as e,c as a,Q as i}from"./chunks/framework.0f4e1e9e.js";const f=JSON.parse('{"title":"建立前端规范","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/1 前端工程化/3 开发/README.md","filePath":"frontend/1 前端工程化/3 开发/README.md"}'),r={name:"frontend/1 前端工程化/3 开发/README.md"},l=i('<h1 id="建立前端规范" tabindex="-1">建立前端规范 <a class="header-anchor" href="#建立前端规范" aria-label="Permalink to &quot;建立前端规范&quot;">​</a></h1><p>统一规范的最根本目的是为了保证团队成员的一致性，从而减少沟通成本，提高开发效率。</p><p>学会热爱标准，但要确保它们不是一成不变的。</p><p>如果制定的规范不适合您的团队，请确保可以适应和重写所需要的任何规则。</p><p>它并不是要强制执行一种工作方式，而是为了帮助促进团队之间的互动。</p><p>开发者需要建立和遵守的规范，大致可以划分成这几个方向：</p><ol><li><a href="./1.开发流程规范.html">开发流程规范</a></li><li><a href="./2.项目目录与文件结构规范.html">项目目录与文件结构规范</a></li><li><a href="./3.开发代码规范.html">开发代码规范</a><ol><li><a href="./ESLint+Prettier/ESLint实践.html">代码质量规范</a></li><li><a href="./ESLint+Prettier/Prettier实践.html">代码风格规范</a></li></ol></li><li><a href="./husky+lint-staged+commitlint/husky+lint-staged+commitlint实践.html">git commit规范</a></li><li><a href="./5.前后端分离接口规范/README.html">前后端分离接口规范</a></li></ol><h4 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h4><p><a href="https://mp.weixin.qq.com/s/oqD6PiLtzDgt4giXl-3JHQ" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/oqD6PiLtzDgt4giXl-3JHQ</a></p>',9),o=[l];function n(h,s,c,m,_,p){return e(),a("div",null,o)}const E=t(r,[["render",n]]);export{f as __pageData,E as default};

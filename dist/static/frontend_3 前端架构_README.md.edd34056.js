import{_ as a,o as e,c as t,Q as r}from"./chunks/framework.0f4e1e9e.js";const f=JSON.parse('{"title":"前端架构","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/3 前端架构/README.md","filePath":"frontend/3 前端架构/README.md"}'),o={name:"frontend/3 前端架构/README.md"},n=r('<h1 id="前端架构" tabindex="-1">前端架构 <a class="header-anchor" href="#前端架构" aria-label="Permalink to &quot;前端架构&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>第一：现在市面上的框架层出不进，更新速度也比较快。从2016的Vue2 到2021的Vue3，很多库也是依赖于这些框架的。那我们的项目到底要不要升级到最新的Vue3，以及如何升级，升级后的收益比如何？这些往往是主要考虑的。但是如果不升级后面的这些框架新特性，以及相关的库很有可能你又用不了。往往咱们就被这些框架所绑定了。</p><p><strong>如何做到“我们用框架，而不是我们被框架绑定“？</strong></p><p>第二：或许你想扩展你的开发，以便多个团队可以共同开发一个产品，但是现有项目的庞大程度、耦合性和复杂性，使得大家都在互相踩脚。</p><p><strong>如何做到“将项目拆分成较小的独立部分，使得软件开发更加容易”？</strong></p><p>第三：或许你正在维护一个长达5年以上的大型项目，这个项目现在启动要几分钟，打包甚至要十多分钟，这样下去严重滞后了你的开发进度。随着时间的推移这个大型项目很难做到对已经存在的技术栈做全量的升级，只能推翻重构。无法实施渐进式重构的手段和策略。</p><p><strong>如何做到“在面对各种复杂场景时，大型项目在长期状态下，保持健康，可扩展，可维护。”</strong></p><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><p>以上这些都是真正的问题，都会对我们的生产能力产生负面影响。</p><p>在我的工作经历中架构主要还是业务架构，咱们在开发企业级应用的时候会选择<a href="./微前端架构设计/README.html">微前端架构设计</a>，为什么选择这种架构模式主要是因为现实情况，如：跨团队开发、跨技术栈开发、独立开发、独立部署等等。</p><p>通过<a href="./微前端架构设计/README.html">微前端架构设计</a>可以做到与技术栈无关、增加升级这些。</p><h2 id="技术栈选型" tabindex="-1">技术栈选型 <a class="header-anchor" href="#技术栈选型" aria-label="Permalink to &quot;技术栈选型&quot;">​</a></h2><p>独立的子应用开发的时候也要做技术选型，在做选型的时候，我往往会考虑以下几个因素：</p><ol><li>是否符合团队现状 <ul><li>你自己的技术能力、团队其他成员的技术能力、时间、管理方案、沟通结果、维护成本、技术方案本身的优缺点</li></ul></li><li>是否符合项目需求</li><li>生态圈是否完善、社区是否活跃</li></ol><p>能把技术用在适合他的地方，才是一个成熟的架构师应该追求的能力。而不只是追求技术本身。</p>',16),l=[n];function i(s,p,h,d,c,_){return e(),t("div",null,l)}const m=a(o,[["render",i]]);export{f as __pageData,m as default};

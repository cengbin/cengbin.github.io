import{_ as a,o as r,c as t,O as n}from"./chunks/framework.d9e2f5d0.js";const _=JSON.parse('{"title":"路由管理开发","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/5 B端应用开发/5 路由管理开发/README.md","filePath":"frontend/5 B端应用开发/5 路由管理开发/README.md"}'),i={name:"frontend/5 B端应用开发/5 路由管理开发/README.md"};function o(c,e,s,d,p,h){return r(),t("div",null,e[0]||(e[0]=[n('<h1 id="路由管理开发" tabindex="-1">路由管理开发 <a class="header-anchor" href="#路由管理开发" aria-label="Permalink to &quot;路由管理开发&quot;">​</a></h1><h2 id="路由系统" tabindex="-1">路由系统 <a class="header-anchor" href="#路由系统" aria-label="Permalink to &quot;路由系统&quot;">​</a></h2><p>约定式路由</p><p>约定式策略来实现路由已经被相当广泛的应用了，比如Nextis，简单说就是文件结构决定路由数据。</p><p>那么为了实现这个策略，那就需要把路由数据拆分清晰，这样，才能保证约定的准确执行</p><h2 id="举个🌰" tabindex="-1">举个🌰 <a class="header-anchor" href="#举个🌰" aria-label="Permalink to &quot;举个🌰&quot;">​</a></h2><p>有【司机管理】菜单，页面路径配置如下</p><p>basic_center/driver_manage 司机列表查询页， basic_center/driver_manage/create 司机增加页面， basic_center/driver_manage/update 司机更新页面， basic_center/driver_manage/detail 司机详情页面，</p><p>【司机管理】菜单路径指向basic_center/driver_manage，其他路径设置菜单隐藏。</p><p>不同的页面通过路由切换来展示，例如要跳转到创建this.$rooter.push(&#39;basic_center/driver_manage/create&#39;),创建成功再通过this.$rooter.push(&#39;basic_center/driver_manage&#39;)跳回到列表查询页面。</p><h3 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h3><p><a href="https://juejin.cn/post/7378891290809090085?searchId=20250216113809B42D7C90EB857333C1D0" target="_blank" rel="noreferrer">五年React手，竟被一个用Ruoyi的Java佬给秒了，这不完了么</a></p>',12)]))}const m=a(i,[["render",o]]);export{_ as __pageData,m as default};

import{_ as e,o as a,c as t,Q as o}from"./chunks/framework.0f4e1e9e.js";const b=JSON.parse('{"title":"登录 - 技术设计","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/6 管理后台-登录技术设计/README.md","filePath":"frontend/6 管理后台-登录技术设计/README.md"}'),r={name:"frontend/6 管理后台-登录技术设计/README.md"},l=o('<h1 id="登录-技术设计" tabindex="-1">登录 - 技术设计 <a class="header-anchor" href="#登录-技术设计" aria-label="Permalink to &quot;登录 - 技术设计&quot;">​</a></h1><h2 id="_1-登录" tabindex="-1">1. 登录 <a class="header-anchor" href="#_1-登录" aria-label="Permalink to &quot;1. 登录&quot;">​</a></h2><ol><li>账号密码校验</li><li>用户行为校验 <ol><li>验证码校验</li><li>短信校验</li><li>滑块校验 <ol><li><a href="https://www.bookstack.cn/read/anji-plus-captcha/f26c8bfb057c4a15.md" target="_blank" rel="noreferrer">https://www.bookstack.cn/read/anji-plus-captcha/f26c8bfb057c4a15.md</a></li><li>captcha <a href="https://github.com/anji-plus/captcha/" target="_blank" rel="noreferrer">https://github.com/anji-plus/captcha/</a></li></ol></li></ol></li><li>账号密码加密</li><li>记住密码</li><li>第三方登录</li><li>sessionId与token存储</li></ol><h3 id="_1-6-sessionid-与-token-存储" tabindex="-1">1.6 sessionId 与 token 存储 <a class="header-anchor" href="#_1-6-sessionid-与-token-存储" aria-label="Permalink to &quot;1.6 sessionId 与 token 存储&quot;">​</a></h3><ul><li>将 Token 存储在 webStorage (localStorage, sessionStorage) 中可以通过同域的js访问，这样导致很容易受到 XSS 攻击，特别是项目中引入很多第三方 js 库的情况下，如果js脚本被盗用，攻击者就可以轻易访问你的网站。</li></ul><blockquote><p>跨站脚本攻击（XSS）：是一种注入代码攻击，通过在网站里注入script代码，当访问者浏览网站的时候通过注入的script代码窃取用户信息，盗用用户身份等</p></blockquote><ul><li>将Token 存储在 cookie 中，可以指定 httponly来防止js被读取，也可以指定 secure 来保证Token 只在 HTTPS 下传输，缺点是不符合RestFul 最佳实践，容易受到 CSRF 攻击。</li></ul><blockquote><p>跨站请求伪造（CSRF）：跨站点请求伪造，攻击者盗用已经认证过的用户信息，以用户信息的名义进行操作（转账，购买商品等），由于身份已经认证过了，所以网站会认为此操作是用户本人操作。CSRF 并不能拿到用户信息，但它可以盗用用户的凭证进行操作。</p></blockquote><h2 id="_2-单点登录" tabindex="-1">2. 单点登录 <a class="header-anchor" href="#_2-单点登录" aria-label="Permalink to &quot;2. 单点登录&quot;">​</a></h2><p>举个场景，假设我们的系统被切割为N个部分：商城、论坛、直播、社交…… 如果用户每访问一个模块都要登录一次，那么用户将会疯掉， 为了优化用户体验，我们急需一套机制将这N个系统的认证授权互通共享，让用户在一个系统登录之后，便可以畅通无阻的访问其它所有系统。</p><p>单点登录——就是为了解决这个问题而生！</p><p>简而言之，单点登录可以做到： <strong>在多个互相信任的系统中，用户只需登录一次，就可以访问所有系统。</strong></p><p><a href="https://sa-token.cc/doc.html#/sso/readme" target="_blank" rel="noreferrer">单点登录（Single Sign-On，简称SSO）</a></p><blockquote><p>理论上用户只需要有一个公司账号就可以了，登录了这个账号就可以访问这个公司的所有产品。但是用户又比较值钱，所以大多数互联网公司都有自己的用户账号，比如：百度账号、淘宝账号、腾讯账号等等。</p></blockquote><h3 id="_2-1-单点登录-sso-的实现方式" tabindex="-1">2.1 单点登录（SSO）的实现方式 <a class="header-anchor" href="#_2-1-单点登录-sso-的实现方式" aria-label="Permalink to &quot;2.1 单点登录（SSO）的实现方式&quot;">​</a></h3><h4 id="前端同域" tabindex="-1">前端同域 <a class="header-anchor" href="#前端同域" aria-label="Permalink to &quot;前端同域&quot;">​</a></h4><p>适用于同一个主域名下的多个子域名。通过在主域名设置共享的 Cookie，实现跨子域名的单点登录。</p><p>例如：baidu.com yun.baidu.com map.baidu.com</p><p><strong>实现步骤：</strong></p><ol><li>用户在主域名（如 <a href="http://example.com" target="_blank" rel="noreferrer">http://example.com</a>）登录后，服务器在该域名下设置一个 Cookie。</li><li>子域名（如 <a href="http://app1.example.com" target="_blank" rel="noreferrer">http://app1.example.com</a> 和 <a href="http://app2.example.com" target="_blank" rel="noreferrer">http://app2.example.com</a>）可以读取这个 Cookie，从而确认用户身份。</li></ol><h4 id="前端不同域" tabindex="-1">前端不同域 <a class="header-anchor" href="#前端不同域" aria-label="Permalink to &quot;前端不同域&quot;">​</a></h4><p>比如：taobao.com tmall.com fliggy.com</p><p><strong>实现步骤：</strong></p><ol><li>用户在某一应用（如 <a href="http://app1.com" target="_blank" rel="noreferrer">http://app1.com</a>）登录后，将用户信息存储在 LocalStorage 中。</li><li>其他应用（如 <a href="http://app2.com" target="_blank" rel="noreferrer">http://app2.com</a>）通过嵌入隐藏的 iframe（指向登录应用的域名）或使用跨域消息传递的方式，从 LocalStorage 中读取用户信息。</li><li>应用读取用户信息并确认身份。</li></ol><h3 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h3><ul><li><a href="https://sa-token.cc/doc.html" target="_blank" rel="noreferrer">Sa-Token</a></li><li><a href="https://mp.weixin.qq.com/s/TyG7ZSutPHjTz-M1yT0sUg" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/TyG7ZSutPHjTz-M1yT0sUg</a></li></ul>',26),i=[l];function n(s,c,p,h,d,m){return a(),t("div",null,i)}const f=e(r,[["render",n]]);export{b as __pageData,f as default};

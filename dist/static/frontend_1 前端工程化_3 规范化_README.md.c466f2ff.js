import{_ as a,o as e,c as t,Q as l}from"./chunks/framework.0f4e1e9e.js";const q=JSON.parse('{"title":"前端开发「规范化」","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/1 前端工程化/3 规范化/README.md","filePath":"frontend/1 前端工程化/3 规范化/README.md"}'),i={name:"frontend/1 前端工程化/3 规范化/README.md"},r=l('<h1 id="前端开发「规范化」" tabindex="-1">前端开发「规范化」 <a class="header-anchor" href="#前端开发「规范化」" aria-label="Permalink to &quot;前端开发「规范化」&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>古人云“无规矩不成方圆”，在做任何事情时都需要有一定的程序、规则或计划，否则难以取得成功或达成目标。</p><h2 id="为什么需要规范" tabindex="-1">为什么需要规范 <a class="header-anchor" href="#为什么需要规范" aria-label="Permalink to &quot;为什么需要规范&quot;">​</a></h2><h5 id="统一代码规范的好处" tabindex="-1">统一代码规范的好处： <a class="header-anchor" href="#统一代码规范的好处" aria-label="Permalink to &quot;统一代码规范的好处：&quot;">​</a></h5><ol><li>提高代码整体的<strong>可读性、可维护性、可复用性、可移植性和可靠性</strong>，这会从根本上<strong>降低开发成本</strong>，也是最重要的一点。</li><li>保证代码的一致性：软件系统中最重要的因素之一就是编码的一致性。如果编码风格一致，也<strong>更加易于维护</strong>，因为团队内任何人都可以快速理解并修改。</li><li>提升团队整体效率：开发人员通常需要花费大量的时间来解决代码质量问题，如果都按照规范编写，也有助于<strong>团队尽早发现问题</strong>，甚至完全预防问题，这将提高整个交付过程的效率。</li><li>减少code review期间一系列的争议，因为缺乏标准，在争议过程中双方很难妥协（没少因为这事争论过😕）。</li></ol><h5 id="若不统一代码规范-可能会造成的后果" tabindex="-1">若不统一代码规范，可能会造成的后果： <a class="header-anchor" href="#若不统一代码规范-可能会造成的后果" aria-label="Permalink to &quot;若不统一代码规范，可能会造成的后果：&quot;">​</a></h5><ol><li>由于缺乏规范，<strong>导致代码风格不一，增加团队成员间的心理负担</strong>，极端情况下，某段代码只有某个人能修改（俗称屎山💩）。</li><li>团队间协作更加困难：因为开发人员得<strong>适应不同的风格，会导致效率低下</strong>（阅读代码是我们花费时间最多的地方）。</li><li>在code review期间可能经常为类似的事情做过多的讨论。</li><li>影响团队的生产力和质量，严重的甚至会影响团队和谐。</li></ol><h2 id="规范建立" tabindex="-1">规范建立 <a class="header-anchor" href="#规范建立" aria-label="Permalink to &quot;规范建立&quot;">​</a></h2><p>开发者需要遵循和建立的规范大致可以划分成这几个方向：</p><ol><li><a href="./开发规范化-开发流程规范.html">开发流程规范</a></li><li><a href="./开发规范化-项目目录与文件结构规范.html">项目目录与文件结构规范</a></li><li><a href="./开发规范化-开发代码规范.html">开发代码规范</a></li><li><a href="./开发规范化-提交规范.html">git commit规范</a></li><li><a href="./开发规范化-前后端分离接口规范.html">前后端接口分离规范</a></li></ol><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ol><li>统一规范的最根本目的是为了保证团队成员的一致性，从而减少沟通成本，提高开发效率。</li><li>学会热爱标准，但要确保它们不是一成不变的。</li><li>如果制定的规范不适合您的团队，请确保可以适应和重写所需要的任何规则。</li><li>它并不是要强制执行一种工作方式，而是为了帮助促进团队之间的互动。</li></ol><h4 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h4><p><a href="https://mp.weixin.qq.com/s/oqD6PiLtzDgt4giXl-3JHQ" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/oqD6PiLtzDgt4giXl-3JHQ</a></p>',15),o=[r];function n(h,s,d,c,m,_){return e(),t("div",null,o)}const p=a(i,[["render",n]]);export{q as __pageData,p as default};

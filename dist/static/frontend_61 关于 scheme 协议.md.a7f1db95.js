import{_ as e,o as s,c as p,O as o}from"./chunks/framework.d9e2f5d0.js";const m=JSON.parse('{"title":"关于 Scheme 协议","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/61 关于 scheme 协议.md","filePath":"frontend/61 关于 scheme 协议.md"}'),l={name:"frontend/61 关于 scheme 协议.md"};function t(n,a,c,r,h,i){return s(),p("div",null,a[0]||(a[0]=[o('<h1 id="关于-scheme-协议" tabindex="-1">关于 Scheme 协议 <a class="header-anchor" href="#关于-scheme-协议" aria-label="Permalink to &quot;关于 Scheme 协议&quot;">​</a></h1><h2 id="scheme-协议" tabindex="-1">Scheme 协议 <a class="header-anchor" href="#scheme-协议" aria-label="Permalink to &quot;Scheme 协议&quot;">​</a></h2><p>Scheme协议，又称为schemes或URL schemes，是一种在Web开发中广泛使用的协议，用于定义和描述URL的结构，使浏览器或应用程序能够正确地解析和处理不同类型的资源。在前端开发中，Scheme协议的灵活性和可扩展性使其成为处理多样化资源的理想选择。</p><p>Scheme协议是通过url的形式进行跳转的，所以我们H5也可以通过这个url去跳转到app内指定页面，这就是H5打开app的原理。</p><p>Scheme的URL格式类似：[scheme]😕/[host]/[path]?[query]</p><p>alipay://platformapi/startapp?saId=10000007</p><h2 id="自定义scheme的应用应用场景" tabindex="-1">自定义Scheme的应用应用场景 <a class="header-anchor" href="#自定义scheme的应用应用场景" aria-label="Permalink to &quot;自定义Scheme的应用应用场景&quot;">​</a></h2><p>在前端开发中，自定义Scheme的应用非常广泛，它们提供了一种灵活的方式来处理特定类型的资源或交互。以下是一些常见的自定义Scheme应用场景：</p><h4 id="a-应用内导航" tabindex="-1">a. 应用内导航 <a class="header-anchor" href="#a-应用内导航" aria-label="Permalink to &quot;a. 应用内导航&quot;">​</a></h4><p>许多移动应用使用自定义Scheme来实现应用内导航。通过定义类似于myapp://page1的Scheme，应用可以在不离开当前应用的情况下导航到特定页面，提供更流畅的用户体验。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;myapp://page1&quot;</span><span style="color:#E1E4E8;">&gt;进入页面1&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;myapp://page1&quot;</span><span style="color:#24292E;">&gt;进入页面1&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><h4 id="b-自定义协议处理" tabindex="-1">b. 自定义协议处理 <a class="header-anchor" href="#b-自定义协议处理" aria-label="Permalink to &quot;b. 自定义协议处理&quot;">​</a></h4><p>一些前端框架或库会定义自己的Scheme，以处理特定类型的操作或资源。例如，某个JavaScript库可能定义了awesome://用于加载自定义组件或模块。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;awesome://loadModule&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;awesome://loadModule&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p>URL Scheme</p><p>Link Scheme</p>',16)]))}const E=e(l,[["render",t]]);export{m as __pageData,E as default};

# Nginx完整配置示例
# 最外层是全局区域配置

#-----------------全局配置区域开始-----------------#

# 指定运行Nginx的用户和用户组，默认是nobody
# user [用户名] [用户组];
user nginx nginx;

# 工作进程数，通常设置为CPU核心数
worker_processes auto;

# 指定错误日志路径和日志级别
# 级别有：debug, info, notice, warn, error, crit, alert, emerg
error_log /var/log/nginx/error.log warn;

# 指定pid文件位置，记录主进程ID
pid /var/run/nginx.pid;

# 工作进程最大可打开文件数量的限制
worker_rlimit_nofile 65535;

#-----------------全局配置区域结束-----------------#


#-----------------events区域配置开始-----------------#

# 事件配置，影响Nginx服务器与用户的网络连接
events {
    # 设置每个工作进程可同时接受的最大连接数
    worker_connections 10240;

    # 使用epoll事件处理模型，Linux系统推荐
    use epoll;
    
    # 开启多工作进程接受连接
    multi_accept on;
}

#-----------------events区域配置结束-----------------#


#-----------------http区域配置开始-----------------#

# HTTP部分配置，用于处理HTTP请求
http {
    # 包含MIME类型定义文件
    include /etc/nginx/mime.types;

    # 默认MIME类型
    default_type application/octet-stream;

    # 定义日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # 访问日志配置
    access_log /var/log/nginx/access.log main;

    # 开启高效文件传输模式
    sendfile on;

    # 防止网络阻塞
    tcp_nopush on;
    tcp_nodelay on;

    # 客户端连接超时时间，单位秒
    keepalive_timeout 65;

    # 客户端请求头部读取超时时间
    client_header_timeout 10;
    
    # 客户端请求主体读取超时时间
    client_body_timeout 10;
    
    # 响应客户端超时时间
    send_timeout 10;

    # 上传文件大小限制
    client_max_body_size 20m;
    
    # 请求缓冲区大小
    client_body_buffer_size 128k;
    
    # 头部缓冲区大小
    client_header_buffer_size 32k;
    
    # 大请求头部缓冲区数量和大小
    large_client_header_buffers 4 64k;

    # 开启gzip压缩
    gzip on;
    
    # 启用压缩的最小文件大小
    gzip_min_length 1k;
    
    # 压缩级别1-9，级别越高压缩比越大，CPU消耗也越大
    gzip_comp_level 6;
    
    # 需要压缩的MIME类型
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    
    # 为不同的客户端发送不同的压缩内容
    gzip_vary on;
    
    # 禁用IE6的gzip
    gzip_disable "MSIE [1-6]\.";

    # 包含其他配置文件
    include /etc/nginx/conf.d/*.conf;


    #-----------------上游服务器配置示例-----------------#
    
    # 定义上游服务器集群
    upstream backend_servers {
        # ip_hash方式实现会话保持
        ip_hash;

        # 定义后端服务器，weight表示权重
        server backend1.example.com weight=5;
        server backend2.example.com weight=1;
        server backend3.example.com weight=3;
        
        # 标记服务器为备份，只有主服务器都不可用时才使用
        server backup.example.com backup;
    }


    #-----------------服务器配置示例-----------------#
    
    # 默认服务器配置
    server {
        # 监听端口
        listen 80;
        
        # 服务器名称，可以是域名或IP地址
        server_name www.example.com example.com;
        
        # 字符集配置
        charset utf-8;

        # 访问日志位置和格式
        access_log /var/log/nginx/host.access.log main;
        
        # 错误日志位置和级别
        error_log /var/log/nginx/host.error.log error;
        
        # 根目录，所有请求基于此目录寻找文件
        # 这是相对于HTTP请求的根目录，而不是文件系统的根目录
        root /usr/share/nginx/html;
        
        # 默认首页
        index index.html index.htm index.php;

        # 基本URL匹配
        location / {
            # 尝试查找文件，如不存在则回退到index.html
            try_files $uri $uri/ /index.html;
            
            # 缓存控制
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        # 静态资源处理
        location ~* \.(css|js|jpg|jpeg|png|gif|ico|webp|svg|ttf|woff|woff2)$ {
            # 静态文件缓存设置，最大有效期365天
            add_header Cache-Control "public, max-age=31536000";
            
            # 访问日志可以在这里关闭
            access_log off;
            
            # 设置过期时间
            expires 365d;
        }
        
        # 代理到上游服务器
        location /api/ {
            # 设置代理目标
            proxy_pass http://backend_servers;
            
            # 设置HTTP头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 代理缓冲区配置
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            
            # 代理连接超时
            proxy_connect_timeout 60s;
            proxy_send_timeout 90s;
            proxy_read_timeout 90s;
            
            # 启用WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # 禁止访问特定文件
        location ~ /\.(ht|git|svn) {
            deny all;
        }

        # PHP处理示例
        location ~ \.php$ {
            # 传递到PHP-FPM
            fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
            # 或使用TCP端口
            # fastcgi_pass 127.0.0.1:9000;
            
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
            
            # 超时设置
            fastcgi_connect_timeout 60s;
            fastcgi_send_timeout 180s;
            fastcgi_read_timeout 180s;
            
            # 缓冲区设置
            fastcgi_buffer_size 128k;
            fastcgi_buffers 4 256k;
            fastcgi_busy_buffers_size 256k;
        }
        
        # 301重定向示例
        location /old-page {
            return 301 /new-page;
        }
        
        # 设置特定错误页面
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }


    #-----------------HTTPS服务器示例-----------------#
    
    # HTTPS服务器
    server {
        # 监听443端口并启用SSL
        listen 443 ssl;
        server_name secure.example.com;

        # SSL证书设置
        ssl_certificate /etc/nginx/ssl/example.com.crt;
        ssl_certificate_key /etc/nginx/ssl/example.com.key;
        
        # SSL会话缓存
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        
        # 使用安全的SSL协议版本
        ssl_protocols TLSv1.2 TLSv1.3;
        
        # 优先使用服务器定义的加密套件顺序
        ssl_prefer_server_ciphers on;
        
        # 安全的加密套件
        ssl_ciphers HIGH:!aNULL:!MD5;
        
        # 启用HSTS，强制客户端使用HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # 其他设置与HTTP服务器类似
        root /usr/share/nginx/html;
        index index.html;
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # 其余配置与HTTP服务器示例相似...
    }
}

#-----------------http区域配置结束-----------------#


#-----------------邮件服务器配置示例-----------------#

# 邮件服务器配置（SMTP/POP3/IMAP代理）
mail {
    server_name mail.example.com;
    auth_http localhost:8008/auth;
    
    # SMTP服务器
    server {
        listen 25;
        protocol smtp;
        proxy on;
        smtp_auth login plain;
        xclient off;
    }
    
    # POP3服务器
    server {
        listen 110;
        protocol pop3;
        proxy on;
    }
    
    # IMAP服务器
    server {
        listen 143;
        protocol imap;
        proxy on;
    }
}

#-----------------邮件服务器配置结束-----------------#


#-----------------流媒体服务器配置示例-----------------#

# RTMP流媒体服务器配置（需要nginx-rtmp-module）
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        
        # 应用程序配置
        application live {
            live on;
            record off;
        }
        
        application vod {
            play /var/www/rtmp/vod;
        }
    }
}

#-----------------流媒体服务器配置结束-----------------#
